{"ast":null,"code":"// HeapSort.js\nexport function heapSort(array) {\n  const animations = [];\n\n  // Build the max heap\n  const buildMaxHeap = () => {\n    const n = array.length;\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n      heapify(n, i);\n    }\n  };\n\n  // Heapify a subtree rooted with node i\n  const heapify = (n, i) => {\n    let largest = i;\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n    if (left < n && array[left] > array[largest]) {\n      largest = left;\n    }\n    if (right < n && array[right] > array[largest]) {\n      largest = right;\n    }\n    if (largest !== i) {\n      // Push animations for comparison and swapping\n      animations.push([i, largest, false]); // Comparison\n      animations.push([i, largest, true]); // Swapping\n      [array[i], array[largest]] = [array[largest], array[i]];\n      heapify(n, largest);\n    }\n  };\n\n  // Perform Heap Sort\n  buildMaxHeap();\n  for (let i = array.length - 1; i > 0; i--) {\n    // Swap root (max element) with the last element\n    animations.push([0, i, true]);\n    [array[0], array[i]] = [array[i], array[0]];\n\n    // Heapify the reduced heap\n    heapify(i, 0);\n  }\n  return animations;\n}","map":{"version":3,"names":["heapSort","array","animations","buildMaxHeap","n","length","i","Math","floor","heapify","largest","left","right","push"],"sources":["D:/Project/sorting_visualizer/src/Algorithms/HeapSort.js"],"sourcesContent":["// HeapSort.js\r\nexport function heapSort(array) {\r\n  const animations = [];\r\n\r\n  // Build the max heap\r\n  const buildMaxHeap = () => {\r\n    const n = array.length;\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n      heapify(n, i);\r\n    }\r\n  };\r\n\r\n  // Heapify a subtree rooted with node i\r\n  const heapify = (n, i) => {\r\n    let largest = i;\r\n    const left = 2 * i + 1;\r\n    const right = 2 * i + 2;\r\n\r\n    if (left < n && array[left] > array[largest]) {\r\n      largest = left;\r\n    }\r\n\r\n    if (right < n && array[right] > array[largest]) {\r\n      largest = right;\r\n    }\r\n\r\n    if (largest !== i) {\r\n      // Push animations for comparison and swapping\r\n      animations.push([i, largest, false]); // Comparison\r\n      animations.push([i, largest, true]);  // Swapping\r\n      [array[i], array[largest]] = [array[largest], array[i]];\r\n      heapify(n, largest);\r\n    }\r\n  };\r\n\r\n  // Perform Heap Sort\r\n  buildMaxHeap();\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    // Swap root (max element) with the last element\r\n    animations.push([0, i, true]);\r\n    [array[0], array[i]] = [array[i], array[0]];\r\n\r\n    // Heapify the reduced heap\r\n    heapify(i, 0);\r\n  }\r\n\r\n  return animations;\r\n}\r\n"],"mappings":"AAAA;AACA,OAAO,SAASA,QAAQA,CAACC,KAAK,EAAE;EAC9B,MAAMC,UAAU,GAAG,EAAE;;EAErB;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,CAAC,GAAGH,KAAK,CAACI,MAAM;IACtB,KAAK,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACJ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEE,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC/CG,OAAO,CAACL,CAAC,EAAEE,CAAC,CAAC;IACf;EACF,CAAC;;EAED;EACA,MAAMG,OAAO,GAAGA,CAACL,CAAC,EAAEE,CAAC,KAAK;IACxB,IAAII,OAAO,GAAGJ,CAAC;IACf,MAAMK,IAAI,GAAG,CAAC,GAAGL,CAAC,GAAG,CAAC;IACtB,MAAMM,KAAK,GAAG,CAAC,GAAGN,CAAC,GAAG,CAAC;IAEvB,IAAIK,IAAI,GAAGP,CAAC,IAAIH,KAAK,CAACU,IAAI,CAAC,GAAGV,KAAK,CAACS,OAAO,CAAC,EAAE;MAC5CA,OAAO,GAAGC,IAAI;IAChB;IAEA,IAAIC,KAAK,GAAGR,CAAC,IAAIH,KAAK,CAACW,KAAK,CAAC,GAAGX,KAAK,CAACS,OAAO,CAAC,EAAE;MAC9CA,OAAO,GAAGE,KAAK;IACjB;IAEA,IAAIF,OAAO,KAAKJ,CAAC,EAAE;MACjB;MACAJ,UAAU,CAACW,IAAI,CAAC,CAACP,CAAC,EAAEI,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;MACtCR,UAAU,CAACW,IAAI,CAAC,CAACP,CAAC,EAAEI,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAE;MACtC,CAACT,KAAK,CAACK,CAAC,CAAC,EAAEL,KAAK,CAACS,OAAO,CAAC,CAAC,GAAG,CAACT,KAAK,CAACS,OAAO,CAAC,EAAET,KAAK,CAACK,CAAC,CAAC,CAAC;MACvDG,OAAO,CAACL,CAAC,EAAEM,OAAO,CAAC;IACrB;EACF,CAAC;;EAED;EACAP,YAAY,CAAC,CAAC;EACd,KAAK,IAAIG,CAAC,GAAGL,KAAK,CAACI,MAAM,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzC;IACAJ,UAAU,CAACW,IAAI,CAAC,CAAC,CAAC,EAAEP,CAAC,EAAE,IAAI,CAAC,CAAC;IAC7B,CAACL,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAACK,CAAC,CAAC,CAAC,GAAG,CAACL,KAAK,CAACK,CAAC,CAAC,EAAEL,KAAK,CAAC,CAAC,CAAC,CAAC;;IAE3C;IACAQ,OAAO,CAACH,CAAC,EAAE,CAAC,CAAC;EACf;EAEA,OAAOJ,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}