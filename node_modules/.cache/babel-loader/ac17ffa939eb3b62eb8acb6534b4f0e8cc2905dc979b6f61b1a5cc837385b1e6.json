{"ast":null,"code":"// MergeSort implementation\nexport function getMergeSortAnimations(array){const animations=[];if(array.length<=1)return array;const auxiliaryArray=array.slice();mergeSortHelper(array,0,array.length-1,auxiliaryArray,animations);return animations;}function mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations){if(startIdx===endIdx)return;const middleIdx=Math.floor((startIdx+endIdx)/2);mergeSortHelper(auxiliaryArray,startIdx,middleIdx,mainArray,animations);mergeSortHelper(auxiliaryArray,middleIdx+1,endIdx,mainArray,animations);doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations);}function doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations){let k=startIdx;let i=startIdx;let j=middleIdx+1;while(i<=middleIdx&&j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([i,j]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([i,j]);if(auxiliaryArray[i]<=auxiliaryArray[j]){// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}else{// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}while(i<=middleIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([i,i]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([i,i]);// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}while(j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([j,j]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([j,j]);// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}","map":{"version":3,"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"sources":["D:/Project/sorting_visualizer/src/Algorithms/MergeSort.js"],"sourcesContent":["// MergeSort implementation\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}